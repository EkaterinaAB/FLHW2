from itertools import permutations

class Automaton:
    def __init__(self, n, m, start_states, finish_states, transitions):
        self.n = n
        self.m = m
        self.start_states = set(start_states)
        self.finish_states = set(finish_states)
        self.transitions = transitions
        self.symbols = set()
        for x in transitions:
            self.symbols.add(x[1])

    def accepts(self, string):
        current_states = self.start_states
        for symbol in string:
            next_states = set()
            for state in current_states:
                if (state, symbol) in self.transitions:
                    next_states.add(self.transitions[(state, symbol)])
            current_states = next_states
        return bool(current_states & self.finish_states)

    def dfs_for_connected_components(self, v, g, Ncom, component_index):
        Ncom[v] = component_index
        for vert in g[v]:
            if Ncom[vert] == -1:
                self.dfs_for_connected_components(vert, g, Ncom, component_index)

    def connected_components(self, N, g):
        Ncom = [-1] * N
        component_index = 0
        for i in range(N):
            if Ncom[i] == -1:
                component_index += 1
                self.dfs_for_connected_components(i, g, Ncom, component_index)
        return component_index, Ncom

    def min_automaton(self):
        M = [[None for _ in range(self.n)] for _ in range(self.n)]

        for p in range(self.n):
            for q in range(p):
                if (p in self.finish_states) != (q in self.finish_states):
                    M[p][q] = "ε"

        changed = True
        while changed:
            changed = False
            for p in range(self.n):
                for q in range(p):
                    if M[p][q] is None:
                        for symbol in self.transitions:
                            if (p, symbol[1]) in self.transitions and (q, symbol[1]) in self.transitions:
                                next_p = self.transitions[(p, symbol[1])]
                                next_q = self.transitions[(q, symbol[1])]
                                if M[next_p][next_q] is not None:
                                    M[p][q] = symbol[1]
                                    changed = True

        equivalent_states_graph = {}
        for x in range(self.n):
            equivalent_states_graph[x] = []

        for p in range(self.n):
            for q in range(p):
                if M[p][q] is None:
                    equivalent_states_graph[p].append(q)
                    equivalent_states_graph[q].append(p)

        components_number, Ncom = self.connected_components(self.n, equivalent_states_graph)

        components_dict = {}
        for i in range(self.n):
            if Ncom[i] not in components_dict:
                components_dict[Ncom[i] - 1] = []
            components_dict[Ncom[i] - 1].append(i)

        new_states = {}
        new_start_states = set()
        new_finish_states = set()
        new_transitions = {}

        for new_q in range(components_number):
            if any(i in self.start_states for i in components_dict[new_q]):
                new_start_states.add(new_q)
            if any(i in self.finish_states for i in components_dict[new_q]):
                new_finish_states.add(new_q)
            for symbolnum in self.symbols:
                for current_q in range(self.n):
                    if (current_q, symbolnum) in self.transitions:
                        new_transitions[(new_q, symbolnum)] = Ncom[self.transitions[(current_q, symbolnum)]] - 1

        return Automaton(components_number, self.m, list(new_start_states), list(new_finish_states), new_transitions)
    
    def is_isomorphic(self, other):
        if self.n != other.n or self.m != other.m:
            return False
        for perm in permutations(range(self.n)):
            is_iso = True
            for state in range(self.n):
                if (perm[state] in other.start_states) != (state in self.start_states):
                    is_iso = False
                    break
                if (perm[state] in other.finish_states) != (state in self.finish_states):
                    is_iso = False
                    break

            if is_iso:
                for (s, sym), next_s in self.transitions.items():
                    if (perm[s], sym) not in other.transitions or perm[next_s] != other.transitions[(perm[s], sym)]:
                        is_iso = False
                        break
                if is_iso:
                    return True
        return False
    def ckeck_min_dfa_accepts_all(self):
        if self.n != 1:
            return False
        for symbol in self.symbols:
            if (0, symbol ) not in  self.transitions:
                return False
        return True

def read_automaton(file_path):
    with open(file_path, 'r') as file:
        lines = [line.strip() for line in file if line.strip()]
        n = int(lines[0])
        m = int(lines[1])
        start_states = list(map(int, lines[2].split()))
        finish_states = list(map(int, lines[3].split()))
        transitions = {}
        for line in lines[4:]:
            parts = list(map(int, line.split()))
            state, symbol, next_state = parts[0], parts[1], parts[2]
            if (state, symbol) not in transitions:
                transitions[(state, symbol)] = []
            transitions[(state, symbol)].append(next_state)
    return Automaton(n, m, start_states, finish_states, transitions)

def test_automaton_minimization():
    automaton = Automaton(3, 2, [0], [1, 2], {
        (0, '1'): 2,
        (2, '1'): 2,
        (2, '2'): 2,
        (0, '2'): 1,
        (1, '2'): 2,
        (1, '1'): 1
    })
    automaton2 = automaton.min_automaton()
    assert  not automaton2.ckeck_min_dfa_accepts_all(), "Test failed!"
    
    automaton_min = Automaton(2, 2, [0], [1], {
        (0, '1'): 1,
        (0, '2'): 1,
        (1, '2'): 1,
        (1, '1'): 1
    })
    assert automaton2.is_isomorphic(automaton_min), "Test failed!"
    print("Minimization test passed!")

def main():

    test_automaton_minimization()
   
    # automaton = read_automaton('input.txt')
    # test_string = input("Введите строку ")
    # if automaton.accepts(test_string):
    #     print("true")
    # else:
    #     print("false")

if __name__ == "__main__":
    main()
